int milli;
int hours;
int minutes; 
int seconds; 
int Run_Time_Since_Last_Run_Command;

//Elapsed time since Run command
//Total run time for today

void Log_Event(char Event) {
    if ((Event == 83) || (Event == 85)) { // ASCII 83 = S, ASCII 85 = U. // If it is an Stop or Unexpected event, calculate the Run_Time_Since_Last_Run_Command time since the Run event.
    Run_Time_Since_Last_Run_Command = (millis() - Run_Start_Time) / 1000;
    Total_Run_Time_Today = Total_Run_Time_Today + Run_Time_Since_Last_Run_Command;
  }
    if (Event == 86) { // ASCII 86 = V. // If it is an Stop or Unexpected event, calculate the Run_Time_Since_Last_Run_Command time since the Run event.
    Run_Time_Since_Last_Run_Command = (millis() - Run_Start_Time) / 1000;
    Total_Run_Time_Today = Total_Run_Time_Today + Run_Time_Since_Last_Run_Command;
  }
  
  loggerObject.log(hour() + ";" + minute() + ";" + second() + ";" + Event + ";" + Run_Time_Since_Last_Run_Command + ";" + Total_Run_Time_Today);
  rename_file_to_show_Run_Time_Since_Last_Run_Command_time();
}

void Log_Event_org(char Event) {
  milli = millis();
  seconds = milli / 1000;
  minutes = seconds / 60;
  hours = minutes / 60;

  if (Event == 71) { // ASCII 67 = G, // The time between the last heartbeat and a pulse from the vacuum optical sensor is too short.
    loggerObject.log(hour() + ";" + minute() + ";" + second() + ";" + Event + ";" + " " + ";" + " " + ";" + " " + ";" + "Vacuum pulse came too early" );
  }

  if (Event == 67) { // ASCII 67 = C, // Show the time between the last two heartbeats.
    Total_Run_Time_Today = Total_Run_Time_Today + (Time_Since_Last_Heartbeat/1000);
    loggerObject.log(hour() + ";" + minute() + ";" + second() + ";" + Event + ";" + Run_Time_Since_Last_Run_Command + ";" + Total_Run_Time_Today + ";" + Time_Since_Last_Heartbeat);
    rename_file_to_show_Run_Time_Since_Last_Run_Command_time();
  }
  if ((Event == 83) || (Event == 85)) { // ASCII 83 = S, ASCII 85 = U. // If it is an Stop or Unexpected event, calculate the Run_Time_Since_Last_Run_Command time since the Run event.
    Run_Time_Since_Last_Run_Command = (millis() - Run_Start_Time) / 1000;
    Total_Run_Time_Today = Total_Run_Time_Today + Run_Time_Since_Last_Run_Command;
  } else {
    Run_Time_Since_Last_Run_Command = 0;
  }
  loggerObject.log(hour() + ";" + minute() + ";" + second() + ";" + Event + ";" + Run_Time_Since_Last_Run_Command + ";" + Total_Run_Time_Today + ";" + Time_Since_Last_Heartbeat);
  if ((Event == 83) || (Event == 85)) { // ASCII 83 = S, ASCII 85 = U.
    rename_file_to_show_Run_Time_Since_Last_Run_Command_time();
  }
}

void rename_file_to_show_Run_Time_Since_Last_Run_Command_time() {
  int Year_Short = year() - 2000;
  String Month = "0";
  int Month_Lead_Zero = month();
  if (Month_Lead_Zero < 10) {
    Month = Month + str(Month_Lead_Zero);
  } else {
    Month = str(Month_Lead_Zero);
  }
  String Day = "0";
  int Day_Lead_Zero = day();
  if (Day_Lead_Zero < 10) {
    Day = Day + str(Day_Lead_Zero);
  } else {
    Day = str(Day_Lead_Zero);
  }
  NewFileName = FileName.substring(0, 22);
  NewFileName = NewFileName + Total_Run_Time_Today + " Seconds "+ Year_Short + Month + Day + "01.csv";
  loggerObject.rename();
  FileName=NewFileName;
  loggerObject  = new Logger (sketchPath("") + "\\Logs\\" + NewFileName );
}


void R() {
  port.write('R');
  Running = true;
  Run_Start_Time = millis();
  Log_Event('R'); 
  but_run=1;
}

void S() {
  port.write('S');
  Running = false;
  Start_Heartbeat_Detection = false;
  Log_Event('S');
}

void C() {
  //  port.write('S');
  //  Running = false;
  //  Start_Heartbeat_Detection = false;
  Log_Event('C');
}

void V() {
  Log_Event('V');
}

void I() {
  port.write('I');
  Log_Event('I');
}

void E() {
  port.write('E');
  Log_Event('E');
}

void L() {
  port.write('L');
  Log_Event('L');
}

void D() {
  port.write('D');
  Log_Event('D');
}

void U() {
  Running = false;
  Log_Event('U'); // This event represents an error. It is generated by not receiving
  // a heartbeat from the Arduino within a specified period of time.
  // The U representes an Unintended event.
}
